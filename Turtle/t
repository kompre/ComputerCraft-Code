direction = {"North" , "East" , "South" , "West"}	-- table of the directions

--  Creation of associated value to the directions
dirValue = {}	
for i = 1,4 do
	dirValue[direction[i]] = i
end

-- Determine which direction the turtle is facing at startup

function isFacing()

	local A = vector.new(gps.locate())
	if turtle.getFuelLevel() >= 2 then	-- check if there is enough fuel for 2 movement (forward and back)
		turtle.forward()
	else 
		print("Not enough fuel")
		return
	end
	local B = vector.new(gps.locate())
	turtle.back()	-- the check for fuel is already done
	local f = A - B
	if f.x == 1 then
		actualDir = "West"
	end
	if f.x == -1 then 
		actualDir = "East"
	end
	if f.z == 1 then 
		actualDir = "North"
	end
	if f.z == -1 then
		actualDir = "South"
	end 
	return actualDir	-- return the current direction the turtle is facing

end


-- Rotate the turtle in the correct direction

function faceTo( actualDir, nextDir )

	local rotation =  dirValue[actualDir] - dirValue[nextDir]
	if rotation > 0 then
		for i = 1,math.abs(rotation) do
			turtle.turnLeft()
		end
	else
		for i = 1,math.abs(rotation) do
			turtle.turnRight()
		end
	end
	return nextDir
end


-- Calculate the vector difference between point A and point B and return size and directions

function AtoB(vectorA,vectorB)

	local dirToGo = {}
	-- Minecraft axis are oriented: positive x towards East, positive z towards South
	local delta = vectorA - vectorB
	-- Since we subtract the destination point B from the origin A, the sign is reversed (negative dx is towards East; negative dz is towards South)
	if delta.y < 0 then
		dirToGo["Up"] = math.abs(delta.y)
	elseif delta.y > 0 then
		dirToGo["Down"] = math.abs(delta.y)
	end
	if delta.x < 0 then
		dirToGo["East"] = math.abs(delta.x)
	elseif delta.x > 0 then
		dirToGo["West"] = math.abs(delta.x)
	end
	if delta.z < 0 then
		dirToGo["South"] = math.abs(delta.z)
	elseif delta.z > 0 then
		dirToGo["North"] = math.abs(delta.z)
	end
	-- calculate the sum of total movement and fuel needed
	totalMoves = math.abs( delta.x ) + math.abs( delta.y ) + math.abs ( delta.z )
	fuelRate = 80 -- assuming coal as fuel
	fuelNeeded = math.ceil( totalMoves/fuelRate )
	return dirToGo, totalMoves, fuelNeeded
end


-- move the turtle in the given direction

function goTo(actualDir, dirToGo)

	local dir, dist
	for dir,dist in pairs(dirToGo) do
		for i = 1,4 do
			if dir == direction[i] then
				actualDir = t.faceTo(actualDir,dir) -- rotate the turtle and update variable about is current direction
				for j = 1,dist do
					turtle.forward()
				end
			end
		end
			if dir == "Up" then
				for j = 1,dist do
					turtle.up()
				end
			end
			if dir == "Down" then
				for j = 1,dist do
					turtle.down()
				end
			end
	end
	return actualDir	-- return the last direction/current direction the turtle is facing
end

-- create a table with cthe content of the inventory of the turtle
function invCheck()
	invList = {}
	for slot = 1,16 do
		turtle.select(slot)
		invList[slot] = turtle.getItemDetail()
	end
	return invList
end

-- check for a specific item
function invCheckFor( invList, pattern ) --string
	item = { slot = false, count = 0, damage = 0 }	-- default state of the variable
	for key,value in pairs(invList) do
		if string.match(value.name, pattern) ~= nil then
			item = { slot = key, count = value.count, damage = value.damage }
			turtle.select( item.slot )
			return item		-- if found something stop, make the function to return
		end
	end
	return item
end

-- other
function vectorize( tab )
	vectorA = vector.new(tab.x, tab.y, tab.z)
	return vectorA
end

function devectorize( vectorA )
	posValue = 'tempX, tempY, tempZ = '..vectorA:tostring()
	dostring( posValue )
	posTab = { x = tempX, y = tempY, z = tempZ  }
	return posTab
end

function dostring( str )
	f = loadstring( str )
	return f()
end

function dropAll(side)
	for i = 1,16 do
		turtle.select(i)
		if side == 'top' then
			turtle.dropUp()
		elseif side == 'down' then
			turtle.dropDown()
		elseif side == nil then
			turtle.drop()
		end
	end
end
		